datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isOnboarded   Boolean          @default(false)
  profile       Profile?
  company       Company?
  trackers      JobTracker[]
  applications  JobApplication[]
}

model Profile {
  id          Int       @id @default(autoincrement())
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
  bio         String?
  imageURL    String?
  createdAt   DateTime  @default(now())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  logoUrl     String?
  website     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @unique
  owner       User      @relation(fields: [userId], references: [id])
  openings    JobPost[]
}

model JobPost {
  id           Int              @id @default(autoincrement())
  title        String
  description  String?
  location     String?
  minSalary    Float
  maxSalary    Float
  currency     Currency
  type         JobType
  isQuickApply Boolean          @default(false)
  externalLink String?
  isRemote     Boolean
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  companyId    Int
  company      Company          @relation(fields: [companyId], references: [id])
  JobTracker   JobTracker[]
  tags         Tag[]
  application  JobApplication[]
}

model Tag {
  id   Int       @id @default(autoincrement())
  name String    @unique
  jobs JobPost[]
}

model JobApplication {
  id        Int               @id @default(autoincrement())
  userId    String
  jobId     Int
  status    ApplicationStatus @default(APPLIED)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id])
  job       JobPost           @relation(fields: [jobId], references: [id])
}

model JobTracker {
  id        Int      @id @default(autoincrement())
  userId    String
  jobId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  job       JobPost  @relation(fields: [jobId], references: [id])
}

enum ApplicationStatus {
  APPLIED
  INTERVIEWING
  REJECTED
  OFFERED
  ACCEPTED
}

enum Currency {
  USD
  EUR
  GBP
  INR
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}
