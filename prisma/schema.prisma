datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String           @id @unique @default(cuid())
  firstName              String?
  lastName               String?
  dateOfBirth            DateTime?
  bio                    String?
  email                  String           @unique
  imageURL               String?
  location               String?
  createdAt              DateTime         @default(now())
  company                Company?
  trackers               JobTracker[]
  applications           JobApplication[]
  cv                     UploadedCv?
  githubLink             String?
  linkedinLink           String?
  twitterLink            String?
  workExperience         WorkExperience[]
  bioCompletions         Int              @default(0)
  lastBioReset           DateTime?        @default(now())
  stripeCustomerId       String?          @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?          @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?          @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?        @map(name: "stripe_current_period_end")
  isSuperUser            Boolean          @default(false)
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  userId      String
  title       String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model UploadedCv {
  id           Int      @id @default(autoincrement())
  userId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  friendlyName String   @default("CV")
  fileName     String
}

model Company {
  id          String    @id @default(cuid())
  name        String
  description String?
  logoUrl     String?
  website     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  openings    JobPost[]
  owner       User?     @relation(fields: [ownerId], references: [id])
  ownerId     String?   @unique
  isVerified  Boolean   @default(false)
}

model JobPost {
  id           String           @id @default(cuid())
  title        String
  description  String?
  location     String?
  minSalary    Float
  maxSalary    Float
  currency     Currency
  type         JobType
  status       JobStatus        @default(ACTIVE)
  isQuickApply Boolean          @default(false)
  externalLink String?
  workMode     WorkMode         @default(ONSITE)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  expiresAt    DateTime?
  companyId    String
  company      Company          @relation(fields: [companyId], references: [id])
  JobTracker   JobTracker[]
  tags         Tag[]
  application  JobApplication[]
}

enum JobStatus {
  ACTIVE
  IN_REVIEW
  INACTIVE
}

enum WorkMode {
  REMOTE
  ONSITE
  HYBRID
}

model Tag {
  id   Int       @id @default(autoincrement())
  name String    @unique
  jobs JobPost[]
}

model JobApplication {
  id              String            @id @default(uuid())
  userId          String
  jobId           String
  status          ApplicationStatus @default(APPLIED)
  rejectionReason String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id])
  job             JobPost           @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model JobTracker {
  id        Int      @id @default(autoincrement())
  jobId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  job       JobPost  @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

enum ApplicationStatus {
  APPLIED
  MATCHED
  REJECTED
  OFFERED
  ACCEPTED
}

enum Currency {
  USD
  EUR
  GBP
  INR
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}
