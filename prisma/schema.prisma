datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String           @id @unique @default(cuid())
  name                   String?
  firstName              String?
  lastName               String?
  dateOfBirth            DateTime?
  isOnboard              Boolean          @default(false)
  bio                    String?
  email                  String?          @unique
  emailVerified          DateTime?
  image                  String?
  location               String?
  createdAt              DateTime         @default(now())
  company                Company?
  trackers               JobTracker[]
  applications           JobApplication[]
  cv                     UploadedCv?
  githubLink             String?
  linkedinLink           String?
  twitterLink            String?
  portfolioLink          String?
  workExperience         WorkExperience[]
  stripeCustomerId       String?          @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?          @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?          @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?        @map(name: "stripe_current_period_end")
  isSuperUser            Boolean          @default(false)
  accounts               Account[]
  sessions               Session[]
  bioGenerations         BioGeneration[]
}

model BioGeneration {
  id        Int      @id @default(autoincrement())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  content   String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  userId      String
  title       String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model UploadedCv {
  id           Int      @id @default(autoincrement())
  userId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  friendlyName String   @default("CV")
  fileName     String
}

model Company {
  id            String         @id @default(cuid())
  name          String
  description   String?
  phone         String?
  logoUrl       String?
  website       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  openings      JobPost[]
  owner         User?          @relation(fields: [ownerId], references: [id])
  ownerId       String?        @unique
  isVerified    Boolean        @default(false)
  employeeCount EmployeeCount?
  addressLine1  String?
  addressLine2  String?
  city          String?
  state         String?
  country       String?
  zipCode       String?
}

enum EmployeeCount {
  ONE_TO_TEN
  ELEVEN_TO_FIFTY
  FIFTY_ONE_TO_TWO_HUNDRED
  TWO_HUNDRED_AND_ONE_TO_FIVE_HUNDRED
  FIVE_HUNDRED_AND_ONE_TO_ONE_THOUSAND
  ONE_THOUSAND_AND_ONE_TO_FIVE_THOUSAND
  FIVE_THOUSAND_AND_ONE_TO_TEN_THOUSAND
  TEN_THOUSAND_AND_ONE_PLUS
}

model JobPost {
  id           String           @id @default(cuid())
  title        String
  description  String?
  location     String?
  minSalary    Float
  maxSalary    Float
  currency     Currency
  interval     PayInterval      @default(YEARLY)
  type         JobType
  status       JobStatus        @default(ACTIVE)
  isQuickApply Boolean          @default(false)
  externalLink String?
  workMode     WorkMode         @default(ONSITE)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  expiresAt    DateTime?
  companyId    String
  company      Company          @relation(fields: [companyId], references: [id])
  JobTracker   JobTracker[]
  tags         Tag[]
  application  JobApplication[]
}

enum PayInterval {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum JobStatus {
  ACTIVE
  IN_REVIEW
  INACTIVE
}

enum WorkMode {
  REMOTE
  ONSITE
  HYBRID
}

model Tag {
  id   Int       @id @default(autoincrement())
  name String    @unique
  jobs JobPost[]
}

model JobApplication {
  id              String            @id @default(uuid())
  userId          String
  jobId           String
  status          ApplicationStatus @default(APPLIED)
  rejectionReason String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id])
  job             JobPost           @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model JobTracker {
  id        Int      @id @default(autoincrement())
  jobId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  job       JobPost  @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

enum ApplicationStatus {
  APPLIED
  MATCHED
  REJECTED
  OFFERED
  ACCEPTED
}

enum Currency {
  USD
  EUR
  GBP
  INR
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}
